extends layout_navbar

block inside
  .row.h-100
    .col-12.col-md-6.bg-success.text-white.px-2.px-sm-5
      .row.h-100.align-items-center
        .col
          h1 Log In
          form#loginForm.mt-5
            .form-group.row
              label.col-sm-2.col-form-label(for="usernameL") Username
              .col-sm-10
                .input-group
                  .input-group-prepend
                    .input-group-text
                      i.material-icons person
                  input#usernameL.form-control(type="text", name="usernameL", placeholder="Username")
            .form-group.row
              label.col-sm-2.col-form-label(for="passwordL") Password
              .col-sm-10
                .input-group
                  .input-group-prepend
                    .input-group-text
                      i.material-icons vpn_key
                  input#passwordL.form-control(type="password", name="passwordL", placeholder="Password")
            .form-group.row
              p#login-error.text-danger.font-weight-bold
            .form-group.row
              input.btn.btn-primary(type="submit", value="Log In")

          
    .col-12.col-md-6.px-2.px-sm-5
      .row.h-100.align-items-center
        .col
          h1 Sign In
          form#registerForm.mt-5
            .form-group.row
              label.col-sm-2.col-form-label(for="usernameS") Username
              .col-sm-10
                .input-group
                  .input-group-prepend
                    .input-group-text
                      i.material-icons person
                  input#usernameS.form-control(type="text", name="usernameS", placeholder="Username")
            .form-group.row
              p#username-error.text-danger.font-weight-bold
            .form-group.row
              label.col-sm-2.col-form-label(for="passwordS") Password
              .col-sm-10
                .input-group
                  .input-group-prepend
                    .input-group-text
                      i.material-icons vpn_key
                  input#passwordS.form-control(type="password", name="passwordS", placeholder="Password")
            .form-group.row
              label.col-sm-2.col-form-label(for="passwordRepeatS") Repeat password
              .col-sm-10
                .input-group
                  .input-group-prepend
                    .input-group-text
                      i.material-icons vpn_key
                  input#passwordRepeatS.form-control(type="password", name="passwordRepeatS", placeholder="Password")
            .form-group.row
              p#password-error.text-danger.font-weight-bold
            .form-group.row
              p#register-success.text-success.font-weight-bold
            .form-group.row
              input.btn.btn-primary(type="submit", value="Sign In", on)
  script.
    //Define inputs
    const usernameLogin = document.getElementById("usernameL");
    const passwordLogin = document.getElementById("passwordL");

    const usernameRegister = document.getElementById("usernameS");
    const passwordRegister = document.getElementById("passwordS");
    const passwordRepeatRegister = document.getElementById("passwordRepeatS");

    const usernameErrorLabel = document.getElementById("username-error");
    const passwordErrorLabel = document.getElementById("password-error");
    const registerSuccessLabel = document.getElementById("register-success");

    const loginErrorLabel = document.getElementById("login-error");

    const errors = {
      MissingPasswordError(msg){
        passwordErrorLabel.innerHTML = msg;
      },
      BulkWriteError(){
        usernameErrorLabel.innerHTML = "Username alredy taken.";
      },
      TooShortUsername(){
        usernameErrorLabel.innerHTML = "Username must have at least 4 characters.";
      },
      TooShortPassword(){
        passwordErrorLabel.innerHTML = "Password must have at least 4 characters.";
      },
      PasswordsDontMatch(){
        passwordErrorLabel.innerHTML = "Password don't match.";
      },
      LoginError(){
        loginErrorLabel.innerHTML = "Username or password is incorrect.";
      }
    }

    function cleanRegisterErrors(){
      usernameErrorLabel.innerHTML = "";
      passwordErrorLabel.innerHTML = "";
      registerSuccessLabel.innerHTML = "";
    }

    function register(e){
      e.preventDefault();
      cleanRegisterErrors();

      if(usernameRegister.value.length < 4) {
        errors["TooShortUsername"]();
        return;
      }
      if(passwordRegister.value.length < 4) {
        errors["TooShortPassword"]();
        return;
      }
      if(passwordRegister.value != passwordRepeatRegister.value) {
        errors["PasswordsDontMatch"]();
        return;
      }

      fetch(`/user/register`, {
        method: 'POST',
        credentials: "same-origin",
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          "username": usernameRegister.value,
          "password": passwordRegister.value
        })})
        .then(res => res.json())
        .then(res => {
          if(res.error) errors[res.error](res.message);
          else{
            usernameRegister.value = "";
            passwordRegister.value = "";
            passwordRepeatRegister.value = "";
            registerSuccessLabel.innerHTML = res.message;
          }
      });

    }

    function login(e){
      e.preventDefault();
      loginErrorLabel.innerHTML = "";

      fetch(`/user/login`, {
        method: 'POST',
        credentials: "same-origin",
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          "username": usernameLogin.value,
          "password": passwordLogin.value
        })})
        .then(res => res.json())
        .then(res => window.location.href = `${window.location.origin}/app`)
        .catch(err => errors['LoginError']());
    }

    window.onload = () => {
      document.getElementById("registerForm").onsubmit = register;
      document.getElementById("loginForm").onsubmit = login;
    }